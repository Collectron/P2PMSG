#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from myfirst import MyFirstService
from myfirst.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void log(string filename)')
    print('  void Messsage_log(string filename, Node node, string message)')
    print('  int get_log_size(string filename)')
    print('  Message sendMessage(Message Msg)')
    print('  NodeList giveNodesInfo()')
    print('  int updateNodes(int action, Node node)')
    print('  void printNodes()')
    print('  void AcceptedMessage(string MessageId)')
    print('  int ReceiveMessage(Message Msg)')
    print('  string sendConversation()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MyFirstService.Client(protocol)
transport.open()

if cmd == 'log':
    if len(args) != 1:
        print('log requires 1 args')
        sys.exit(1)
    pp.pprint(client.log(args[0],))

elif cmd == 'Messsage_log':
    if len(args) != 3:
        print('Messsage_log requires 3 args')
        sys.exit(1)
    pp.pprint(client.Messsage_log(args[0], eval(args[1]), args[2],))

elif cmd == 'get_log_size':
    if len(args) != 1:
        print('get_log_size requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_log_size(args[0],))

elif cmd == 'sendMessage':
    if len(args) != 1:
        print('sendMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendMessage(eval(args[0]),))

elif cmd == 'giveNodesInfo':
    if len(args) != 0:
        print('giveNodesInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.giveNodesInfo())

elif cmd == 'updateNodes':
    if len(args) != 2:
        print('updateNodes requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateNodes(eval(args[0]), eval(args[1]),))

elif cmd == 'printNodes':
    if len(args) != 0:
        print('printNodes requires 0 args')
        sys.exit(1)
    pp.pprint(client.printNodes())

elif cmd == 'AcceptedMessage':
    if len(args) != 1:
        print('AcceptedMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.AcceptedMessage(args[0],))

elif cmd == 'ReceiveMessage':
    if len(args) != 1:
        print('ReceiveMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.ReceiveMessage(eval(args[0]),))

elif cmd == 'sendConversation':
    if len(args) != 0:
        print('sendConversation requires 0 args')
        sys.exit(1)
    pp.pprint(client.sendConversation())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
