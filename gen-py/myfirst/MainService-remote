#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from myfirst import MainService
from myfirst.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string sendMessage(Message Msg)')
    print('  NodeList giveNodesInfo()')
    print('  string updateNodes(int action, Node node)')
    print('  void printNodes()')
    print('  void AcceptedMessage(string MessageId)')
    print('  int removeNode(Node node)')
    print('  string ValidateMessage(string key)')
    print('  int ReceiveMessage(Message Msg)')
    print('  string sendConversation()')
    print('   updateConversation(int currentMessageLine)')
    print('  string checkIfNodeIsUp()')
    print('  string refreshYourConversation()')
    print('  string sendMessageToProcess(string key, NodeList NdLst)')
    print('  string nodeDidNotRespond(Node nodeThatWentWrong)')
    print('  int AppendToListNode(string key)')
    print('  void pingMe(Message msg)')
    print('  int sendListNodes(NodeList lst)')
    print('  void getConversation(string conv)')
    print('  void popen()')
    print('  int getLastMessage(Message msg)')
    print('  int flushYourList()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = MainService.Client(protocol)
transport.open()

if cmd == 'sendMessage':
    if len(args) != 1:
        print('sendMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendMessage(eval(args[0]),))

elif cmd == 'giveNodesInfo':
    if len(args) != 0:
        print('giveNodesInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.giveNodesInfo())

elif cmd == 'updateNodes':
    if len(args) != 2:
        print('updateNodes requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateNodes(eval(args[0]), eval(args[1]),))

elif cmd == 'printNodes':
    if len(args) != 0:
        print('printNodes requires 0 args')
        sys.exit(1)
    pp.pprint(client.printNodes())

elif cmd == 'AcceptedMessage':
    if len(args) != 1:
        print('AcceptedMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.AcceptedMessage(args[0],))

elif cmd == 'removeNode':
    if len(args) != 1:
        print('removeNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeNode(eval(args[0]),))

elif cmd == 'ValidateMessage':
    if len(args) != 1:
        print('ValidateMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.ValidateMessage(args[0],))

elif cmd == 'ReceiveMessage':
    if len(args) != 1:
        print('ReceiveMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.ReceiveMessage(eval(args[0]),))

elif cmd == 'sendConversation':
    if len(args) != 0:
        print('sendConversation requires 0 args')
        sys.exit(1)
    pp.pprint(client.sendConversation())

elif cmd == 'updateConversation':
    if len(args) != 1:
        print('updateConversation requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateConversation(eval(args[0]),))

elif cmd == 'checkIfNodeIsUp':
    if len(args) != 0:
        print('checkIfNodeIsUp requires 0 args')
        sys.exit(1)
    pp.pprint(client.checkIfNodeIsUp())

elif cmd == 'refreshYourConversation':
    if len(args) != 0:
        print('refreshYourConversation requires 0 args')
        sys.exit(1)
    pp.pprint(client.refreshYourConversation())

elif cmd == 'sendMessageToProcess':
    if len(args) != 2:
        print('sendMessageToProcess requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessageToProcess(args[0], eval(args[1]),))

elif cmd == 'nodeDidNotRespond':
    if len(args) != 1:
        print('nodeDidNotRespond requires 1 args')
        sys.exit(1)
    pp.pprint(client.nodeDidNotRespond(eval(args[0]),))

elif cmd == 'AppendToListNode':
    if len(args) != 1:
        print('AppendToListNode requires 1 args')
        sys.exit(1)
    pp.pprint(client.AppendToListNode(args[0],))

elif cmd == 'pingMe':
    if len(args) != 1:
        print('pingMe requires 1 args')
        sys.exit(1)
    pp.pprint(client.pingMe(eval(args[0]),))

elif cmd == 'sendListNodes':
    if len(args) != 1:
        print('sendListNodes requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendListNodes(eval(args[0]),))

elif cmd == 'getConversation':
    if len(args) != 1:
        print('getConversation requires 1 args')
        sys.exit(1)
    pp.pprint(client.getConversation(args[0],))

elif cmd == 'popen':
    if len(args) != 0:
        print('popen requires 0 args')
        sys.exit(1)
    pp.pprint(client.popen())

elif cmd == 'getLastMessage':
    if len(args) != 1:
        print('getLastMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLastMessage(eval(args[0]),))

elif cmd == 'flushYourList':
    if len(args) != 0:
        print('flushYourList requires 0 args')
        sys.exit(1)
    pp.pprint(client.flushYourList())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
