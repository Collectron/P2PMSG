import sys, glob, os, socket, copy
# path for file generated by Apache Thrift Compiler
sys.path.append('gen-py')
# add path where built Apache Thrift libraries are
sys.path.insert(0, glob.glob('~/thrift-0.10.0/lib/py/build/lib.*'))

from time import sleep, time
from myfirst import MainService
from myfirst.ttypes import *
from myfirst.constants import *

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

if __name__ == '__main__':
	sleep(0.5)
	print("")
	print("Subprocess for message Queue is up!")
	print("")

	#########################################################################################

	MAX_NUMBER_OF_TRIES=10 # After thuis number the Node is considered down
	ValidatedMessageList = [] # List of Validated Messages
	NotValidatingNodes = [] # self-explanatory
	Key = "" # Key of next message
	Server_IP, Server_port = sys.argv[1].split(":") # ip and port of Synchronizer server-node
	Server_Name = sys.argv[2] # Name of Synchronizer Node
	Polling_frequency = 0.05

	while True:
		sleep(Polling_frequency)
		transport = TSocket.TSocket(Server_IP, Server_port)
		transport = TTransport.TBufferedTransport(transport)
		protocol = TBinaryProtocol.TBinaryProtocol(transport)
		connection = MainService.Client(protocol)
		transport.open()
		Key = connection.sendMessageToProcess(Key, NotValidatingNodes) # get Message
		NetworkNodes = connection.giveNodesInfo() # Get the Nodes of the Network
		transport.close()

		if Key == "":
			if Polling_frequency < 0.1:
				Polling_frequency += 0.005
			continue
		else:
			Polling_frequency = 0.05
		
		NotValidatingNodes = []

		PendingNodes=False
		for Node in NetworkNodes:
			if (Node.nodeName == Server_Name) | (Node in NotValidatingNodes):
				continue
			try:
				transport = TSocket.TSocket(Node.IPaddress.split(':')[0], Node.IPaddress.split(':')[1])
				transport = TTransport.TBufferedTransport(transport)
				protocol = TBinaryProtocol.TBinaryProtocol(transport)
				client = MainService.Client(protocol)
				transport.open()
				success=client.ValidateMessage(Key)
				transport.close()

				if success != "Validated":
					print("")
					print("Node "+Node.nodeName+" could not validate the message (probably is not received)"+Node.IPaddress.split(':')[0], Node.IPaddress.split(':')[1])
					print("")
					NotValidatingNodes.append(Node)
					PendingNodes = True
			except:
				NotValidatingNodes.append(Node)
				PendingNodes = True

		if PendingNodes:
			sleep(0.02) # Give some time to the Nodes to receive some messages
			ValidatedNodes = []
			for Node in NotValidatingNodes:
				tries = 0
				while tries < MAX_NUMBER_OF_TRIES:
					try:
						transport = TSocket.TSocket(Node.IPaddress.split(':')[0], Node.IPaddress.split(':')[1])
						transport = TTransport.TBufferedTransport(transport)
						protocol = TBinaryProtocol.TBinaryProtocol(transport)
						client = MainService.Client(protocol)
						transport.open()
						success=client.ValidateMessage(Key)
						transport.close()

					except:
						tries=MAX_NUMBER_OF_TRIES
						continue

					if success == "Validated":
						ValidatedNodes.append(Node)
						break
					tries+=1
					if tries == MAX_NUMBER_OF_TRIES:
						print("")
						print("Node "+Node.nodeName+" has a problem")
						print("")

			for Node in ValidatedNodes:
				NotValidatingNodes.remove(Node)